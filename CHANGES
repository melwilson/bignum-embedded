2012-06-12
	Undid previous cuts to bn_errno format; used bnem_random_word in 
RAND_bytes implementation; added another level of debug printout controlled by 
C_DEBUG symbol.
	bignum-embedded is now supporting development of a small embedded
security application.  A round of code cleanup is starting to look like a good
thing.

2012-06-10
	Simplified functions for primality testing and random-number generation
are added, plus an implementation of Euclid's Extended GCD algorithm.  For 
the time being, these changes have only been tested as .so for i386 .


2012-05-28
	A test case in the `armtests` directory runs on an stm32f4-discovery board
and unit tests show that the bignum results agree with Python long arithmetic.
Correct results are only obtained by using dynamic memory allocation in the
embedded board.  The bignum library needs to resize results in many circumstances
and static allocation can't be done without understanding what those circumstances
are.
	Packaging is rather crude.  All source for the stm32f4 unit tests is carried
in that directory (thinking of the unit tests as a primordial application,this might be a 
good thing.)  Makefiles for the stm32f4 test programs are tied to a particular tool chain.  
Makefiles are being reorganized to localize these dependencies so that someday users 
with other toolchains will know what to change.


2012-04-24
	Test cases cover basic addition, subtraction, multiplication, division,
and modular exponentiation.  A show-stopping problem appears when
trying to use BN_clear_free to free a BIGNUM through ctypes; this may or
may not be mission critical.  At any rate, we need to do some philosophy 
around the usefulness of dynamic allocation in embedded systems.
It's starting to look as though the biggest issues are going to be in
configuration, packaging, and allocation.  E.g. providing an "opaque"
data type to hold context within multiplication, division, and module-extraction
is bad for routines that want their objects on the stack.


2012-04-23
	The code from the OpenSSL project has been pruned to remove 
upward dependencies, then kludged cargo-cult style to get error-free 
compiles and library builds.
The unittests directory holds some framework code running under Linux 
and Python3.1.2 with ctypes that allows results from the BN_* functions 
to be checked against Python's own big-number implementation.


2012-04-19
	Code as modified compiles as individual modules without show-stopping errors.
None of the modified code has been tested or run.